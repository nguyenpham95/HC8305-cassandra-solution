{
  "_args": [
    [
      "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
      "C:\\Users\\phamk_000\\Desktop\\development\\cassandra"
    ]
  ],
  "_from": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
  "_id": "ng-cordova-bluetoothle@4.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ng-cordova-bluetoothle",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/randdusing/ng-cordova-bluetoothle/master/package.json",
      "gitUrl": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
      "httpsUrl": "git+https://github.com/randdusing/ng-cordova-bluetoothle.git#master",
      "shortcut": "github:randdusing/ng-cordova-bluetoothle#master",
      "ssh": "git@github.com:randdusing/ng-cordova-bluetoothle.git#master",
      "sshUrl": "git+ssh://git@github.com/randdusing/ng-cordova-bluetoothle.git#master",
      "type": "github"
    },
    "name": null,
    "raw": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
    "rawSpec": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
    "scope": null,
    "spec": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/randdusing/ng-cordova-bluetoothle.git#0fddf9d36be8ccc5346e0c71bcdb1f3cac0b4d7d",
  "_shasum": "0c0459b75fd6d669164fcf0f08a4bff079ab3d1f",
  "_shrinkwrap": null,
  "_spec": "git://github.com/randdusing/ng-cordova-bluetoothle.git#master",
  "_where": "C:\\Users\\phamk_000\\Desktop\\development\\cassandra",
  "author": {
    "name": "George Stocker",
    "url": "http://georgestocker.com"
  },
  "contributors": [
    {
      "name": "Rand Dusing",
      "email": "randdusing@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "AngularJS Wrapper for Phonegap / Cordova Bluetooth LE Plugin",
  "devDependencies": {},
  "gitHead": "0fddf9d36be8ccc5346e0c71bcdb1f3cac0b4d7d",
  "homepage": "http://github.com/Jewelbots/ng-cordova-bluetoothle",
  "keywords": [
    "angularjs",
    "bluetooth le",
    "cordova",
    "ionic",
    "ng-cordova-bluetoothle",
    "phonegap"
  ],
  "license": "MIT",
  "main": "ng-cordova-bluetoothle.js",
  "name": "ng-cordova-bluetoothle",
  "optionalDependencies": {},
  "readme": "# ng-cordova-bluetoothle\r\n\r\nThis wraps the [Bluetooth Low Energy Phonegap Plugin](https://github.com/randdusing/cordova-plugin-bluetoothle) by Rand Dusing in AngularJS code so it can be used more easily in AngularJS mobile applications.\r\n\r\n\r\n## Issues ##\r\nPlease only create issues that are directly related to ng-cordova-bluetoothle!\r\nIf it's not an Angular/Javascript issue, create the issue in the [cordova-plugin-bluetoothle](https://github.com/randdusing/cordova-plugin-bluetoothle) repo!\r\n\r\n\r\n## Installation\r\n\r\n* Install the Bluetooth LE Plugin: ``` cordova plugin add cordova-plugin-bluetoothle ```\r\n* Install the Angular Wrapper: ``` bower install git://github.com/randdusing/ng-cordova-bluetoothle.git#master ```\r\n\r\n\r\n\r\n### Example App\r\n\r\nAn example app has been created using the Ionic Framework to demonstrate the functionality. To install the example app, follow the steps below:\r\n\r\n* Create a new Ionic Project: ionic start test tabs\r\n* Install the Bluetooth LE plugin: cordova plugin add cordova-plugin-bluetoothle\r\n* Install the Angular Wrapper: ```bower install git://github.com/randdusing/ng-cordova-bluetoothle.git#master```\r\n* Install crypto-js library if using examples: ```bower install js-md5```\r\n* Add contents from /example to /www of the Cordova project, replacing if necessary\r\n* Build and run the Cordova project\r\n\r\n\r\n\r\n### Example Usage\r\nA few examples, but the example app is your best resource.\r\n\r\n#### Initialize\r\n```\r\n  $cordovaBluetoothLE.initialize({request:true}).then(null,\r\n    function(obj) {\r\n      //Handle errors\r\n    },\r\n    function(obj) {\r\n      //Handle successes\r\n    }\r\n  );\r\n```\r\n\r\nInitialize uses the notify callback to keep track of changes in the Bluetooth state (on/off).\r\n\r\n#### Scan\r\n```\r\n  $cordovaBluetoothLE.startScan({services:[]}).then(null,\r\n    function(obj) {\r\n      //Handle errors\r\n      console.log(obj.message);\r\n    },\r\n    function(obj) {\r\n      if (obj.status == \"scanResult\")\r\n      {\r\n        //Device found\r\n      }\r\n      else if (obj.status == \"scanStarted\")\r\n      {\r\n        //Scan started\r\n      }\r\n    }\r\n  );\r\n```\r\n\r\nScan uses the notify callback as well since multiple scanned devices may be returned.\r\n\r\n#### Connect\r\n```\r\n  $cordovaBluetoothLE.connect({address:\"ABCDEFG\"}).then(null,\r\n    function(obj) {\r\n      //Handle errors\r\n      console.log(obj.message);\r\n    },\r\n    function(obj) {\r\n      if (obj.status == \"connected\") {\r\n        //Device connected\r\n      } else {\r\n        //Device disconnected, handle this unexpected disconnect\r\n      }\r\n    }\r\n  );\r\n```\r\n\r\nConnect uses the notify callback as well since the connection state may change. See useResolve option below for resolve vs notify.\r\n\r\n\r\n\r\n## Available Functions\r\nFor details on each function, please visit https://github.com/randdusing/cordova-plugin-bluetoothle. A few methods require you wait for notify rather than resolve since the callback may be called multiple times: intialize, startScan, connect, reconnect, disconnect, subscribe. Enable and disable only wait for error since the \"success\" is returned to the initialize\r\n\r\n* $cordovaBluetoothLE.initialize(params).then(null, error, success);\r\n* $cordovaBluetoothLE.enable().then(null, error); **Android**\r\n* $cordovaBluetoothLE.disable().then(null, error); **Android**\r\n* $cordovaBluetoothLE.startScan(params).then(null, error, success);\r\n* $cordovaBluetoothLE.stopScan().then(success, error);\r\n* $cordovaBluetoothLE.retrieveConnected(params).then(success, error);\r\n* $cordovaBluetoothLE.bond(params).then(null, error, success);\r\n* $cordovaBluetoothLE.unbond(params).then(success, error);\r\n* $cordovaBluetoothLE.connect(params).then(null, error, success);\r\n* $cordovaBluetoothLE.reconnect(params).then(null, error, success);\r\n* $cordovaBluetoothLE.disconnect(params).then(success, error);\r\n* $cordovaBluetoothLE.close(params).then(success, error);\r\n* $cordovaBluetoothLE.discover(params).then(success, error);\r\n* $cordovaBluetoothLE.services(params).then(success, error); **iOS**\r\n* $cordovaBluetoothLE.characteristics(params).then(success, error); **iOS**\r\n* $cordovaBluetoothLE.descriptors(params).then(success, error); **iOS**\r\n* $cordovaBluetoothLE.read(params).then(success, error);\r\n* $cordovaBluetoothLE.subscribe(params).then(null, error, success);\r\n* $cordovaBluetoothLE.unsubscribe(params).then(success, error);\r\n* $cordovaBluetoothLE.write(params).then(success, error);\r\n* $cordovaBluetoothLE.writeQ(params).then(success, error);\r\n* $cordovaBluetoothLE.readDescriptor(params).then(success, error);\r\n* $cordovaBluetoothLE.writeDescriptor(params).then(success, error);\r\n* $cordovaBluetoothLE.rssi(params).then(success, error);\r\n* $cordovaBluetoothLE.mtu(params).then(success, error); **Android**\r\n* $cordovaBluetoothLE.requestConnectionPriority(params).then(success, error); **Android**\r\n* $cordovaBluetoothLE.isInitialized(params).then(success);\r\n* $cordovaBluetoothLE.isEnabled(params).then(success);\r\n* $cordovaBluetoothLE.isScanning(params).then(success);\r\n* $cordovaBluetoothLE.isBonded(params).then(success);\r\n* $cordovaBluetoothLE.wasConnected(params).then(success, error);\r\n* $cordovaBluetoothLE.isConnected(params).then(success, error);\r\n* $cordovaBluetoothLE.isDiscovered(params).then(success, error);\r\n* $cordovaBluetoothLE.hasPermission().then(success, error); **Android 6.0+**\r\n* $cordovaBluetoothLE.requestPermission().then(success, error); **Android 6.0+**\r\n* $cordovaBluetoothLE.isLocationEnabled().then(success, error); **Android 6.0+**\r\n* $cordovaBluetoothLE.requestLocation().then(success, error); **Android 6.0+**\r\n* $cordovaBluetoothLE.initializePeripheral(params).then(success, error);\r\n* $cordovaBluetoothLE.addService(params).then(success, error);\r\n* $cordovaBluetoothLE.removeService(params).then(success, error);\r\n* $cordovaBluetoothLE.removeAllServices().then(success, error);\r\n* $cordovaBluetoothLE.startAdvertising().then(success, error);\r\n* $cordovaBluetoothLE.stopAdvertising().then(success, error);\r\n* $cordovaBluetoothLE.isAdvertising().then(success, error);\r\n* $cordovaBluetoothLE.respond(params).then(success, error);\r\n* $cordovaBluetoothLE.notify(params).then(success, error);\r\n* $cordovaBluetoothLE.encodedStringToBytes(encodedString);\r\n* $cordovaBluetoothLE.bytesToEncodedString(bytes);\r\n* $cordovaBluetoothLE.stringToBytes(string);\r\n* $cordovaBluetoothLE.bytesToString(bytes);\r\n\r\n### Options ###\r\n* useResolve - If true, forces connect and reconnect to resolve the promise rather than using notify.\r\n* timeout - If set, the operation will timeout with an error after X milliseconds. Available on connect, reconnect, discover, services, characteristics, descriptors, read, subscribe, unsubscribe, write, readDescriptor, writeDescriptor, rssi, mtu, requestConnectionPriority.\r\n* scanTimeout - On a successful scan start, automatically stop the scan after X milliseconds.\r\n* subscribeTimeout - On a successful subscribe, automatically unsubscribe after X milliseconds.\r\n\r\n### Examples ###\r\nSome examples are provided to help demonstrate different common scenarios. Looking for more examples? Let me know!\r\n\r\n* Throughput (Central) - Transfers a file to another device running Throughput (Peripheral). Make sure to start the Throughput (Peripheral) test first.\r\n* Throughput (Peripheral) - Receives a file from another device running Throughput (Central).\r\n* Read All - Scans for first available device, connects to it, discovers it, iterates through all characteristics and reads them, disconnects and finally closes. This provides a good example of promise chains.\r\n\r\n### Queueing Operations ###\r\nExample of how you could queue up three read operations.\r\n```javascript\r\n  $cordovaBluetoothLE.read(params1).then(function() { //Read 1\r\n    return $cordovaBluetoothLE.read(params2); //Read 2\r\n  }).then(function() {\r\n    return $cordovaBluetoothLE.read(params3); //Read 3\r\n  }).catch(function(err) {\r\n    console.log(err); //Catch any errors\r\n  });\r\n```\r\n\r\n## Have a question or found a bug?\r\n\r\n[Open an issue](https://github.com/randdusing/ng-cordova-bluetoothle/issues).\r\n\r\n## Resources\r\n\r\nAngularJS - [http://www.angularjs.org](http://www.angularjs.org)\r\n\r\nApache Cordova - [http://cordova.apache.org](http://cordova.apache.org)\r\n\r\n### License and Source\r\nThe code that powers the 'build generation' is a carbon copy (with minimal changes) of [Nic Raboy's ngCordovaBeacon project](https://github.com/nraboy/ng-cordova-beacon).  As of the Fork, it was licensed under the MIT license;  The Cordova Wrapper was written by myself, and my employer and I retain the copyright for that; but this project is also licensed under the [MIT License](LICENSE.md).\r\n\r\nIf you want to follow more of Nic's work, his blog is located [here](https://blog.nraboy.com). If you want to know more about me or Jewelbots, you can follow [Jewelbots](http://twitter.com/jewelbots) on twitter, [our Ink](https://medium.com/jewelbots-weblog), or [me](http://twitter.com/gortok).\r\n\r\n### Contributing\r\nRand Dusing - Primary author of the [Cordova Bluetooth LE Plugin](https://github.com/randdusing/cordova-plugin-bluetoothle). You can contact me via: <randdusing@gmail.com>, [Facebook](https://www.facebook.com/randdusing), [LinkedIn](https://www.linkedin.com/in/randdusing) or [Twitter](https://twitter.com/randdusing).\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "grunt test"
  },
  "version": "4.2.0"
}
